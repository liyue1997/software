React框架特点
1.声明式设计 ?React采用声明范式，可以轻松描述应用。

2.高效 ?React通过对DOM的模拟，最大限度地减少与DOM的交互。

3.灵活 ?React可以与已知的库或框架很好地配合。

4.JSX ? JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX。

5.组件 ? 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。

6.单向响应的数据流 ? React 实现了单向响应的数据流，从而减少了重复代码。

React生命周期

第一个是组件初始化(initialization)阶段

super(props)用来调用基类的构造方法( constructor() ), 也将父组件的props注入给子组件，功子组件读取(组件中props只读不可变，state可变)。
而constructor()用来做一些组件的初始化工作，如定义this.state的初始内容。


第二个是组件的挂载(Mounting)阶段
此阶段分为componentWillMount，render，componentDidMount三个时期。

componentWillMount:
在组件挂载到DOM前调用，且只会被调用一次，在这边调用this.setState不会引起组件重新渲染，也可以把写在这边的内容提前到constructor()中，所以项目中很少用。

render:
根据组件的props和state（无两者的重传递和重赋值，论值是否有变化，都可以引起组件重新render） ，return 一个React元素（描述组件，即UI），不负责组件实际渲染工作，之后由React自身根据此元素去渲染出页面DOM。render是纯函数（Pure function：函数的返回结果只依赖于它的参数；函数执行过程里面没有副作用），不能在里面执行this.setState，会有改变组件状态的副作用。

componentDidMount:
组件挂载到DOM后调用，且只会被调用一次.

第三个是组件的更新(update)阶段
在讲述此阶段前需要先明确下react组件更新机制。setState引起的state更新或父组件重新render引起的props更新，更新后的state和props相对之前无论是否有变化，都将引起子组件的重新render。

componentWillReceiveProps 在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用。

shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。
可以在你确认不需要更新组件时使用。

componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。

componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。

卸载阶段
此阶段只有一个生命周期方法：componentWillUnmount

componentWillUnmount
此方法在组件被卸载前调用，可以在这里执行一些清理工作，比如清楚组件中使用的定时器，清楚componentDidMount中手动创建的DOM元素等，以避免引起内存泄漏。

本项目使用dva轻型框架, 基于redux.

请求后台方法调用:

service层里创建请求后台方法,完善请求接口,method请求方式,body请求参数.
models层中调用service层方法, 处理返回数据.
pages层调用models层,dispatch方法,type:调用models层方法,payload:输入请求后台的参数,callback:做后台返回数据处理.









